// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/Mitra-Apps/be-store-service/domain/store/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStoreServiceRepository is a mock of StoreServiceRepository interface.
type MockStoreServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStoreServiceRepositoryMockRecorder
}

// MockStoreServiceRepositoryMockRecorder is the mock recorder for MockStoreServiceRepository.
type MockStoreServiceRepositoryMockRecorder struct {
	mock *MockStoreServiceRepository
}

// NewMockStoreServiceRepository creates a new mock instance.
func NewMockStoreServiceRepository(ctrl *gomock.Controller) *MockStoreServiceRepository {
	mock := &MockStoreServiceRepository{ctrl: ctrl}
	mock.recorder = &MockStoreServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreServiceRepository) EXPECT() *MockStoreServiceRepositoryMockRecorder {
	return m.recorder
}

// CreateStore mocks base method.
func (m *MockStoreServiceRepository) CreateStore(ctx context.Context, store *entity.Store) (*entity.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStore", ctx, store)
	ret0, _ := ret[0].(*entity.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStore indicates an expected call of CreateStore.
func (mr *MockStoreServiceRepositoryMockRecorder) CreateStore(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStore", reflect.TypeOf((*MockStoreServiceRepository)(nil).CreateStore), ctx, store)
}

// DeleteStore mocks base method.
func (m *MockStoreServiceRepository) DeleteStore(ctx context.Context, storeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStore", ctx, storeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStore indicates an expected call of DeleteStore.
func (mr *MockStoreServiceRepositoryMockRecorder) DeleteStore(ctx, storeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStore", reflect.TypeOf((*MockStoreServiceRepository)(nil).DeleteStore), ctx, storeID)
}

// GetStore mocks base method.
func (m *MockStoreServiceRepository) GetStore(ctx context.Context, storeID string) (*entity.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore", ctx, storeID)
	ret0, _ := ret[0].(*entity.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStore indicates an expected call of GetStore.
func (mr *MockStoreServiceRepositoryMockRecorder) GetStore(ctx, storeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockStoreServiceRepository)(nil).GetStore), ctx, storeID)
}

// GetStoreByUserID mocks base method.
func (m *MockStoreServiceRepository) GetStoreByUserID(ctx context.Context, userID uuid.UUID) (*entity.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreByUserID", ctx, userID)
	ret0, _ := ret[0].(*entity.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreByUserID indicates an expected call of GetStoreByUserID.
func (mr *MockStoreServiceRepositoryMockRecorder) GetStoreByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreByUserID", reflect.TypeOf((*MockStoreServiceRepository)(nil).GetStoreByUserID), ctx, userID)
}

// ListStores mocks base method.
func (m *MockStoreServiceRepository) ListStores(ctx context.Context) ([]*entity.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStores", ctx)
	ret0, _ := ret[0].([]*entity.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStores indicates an expected call of ListStores.
func (mr *MockStoreServiceRepositoryMockRecorder) ListStores(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStores", reflect.TypeOf((*MockStoreServiceRepository)(nil).ListStores), ctx)
}

// OpenCloseStore mocks base method.
func (m *MockStoreServiceRepository) OpenCloseStore(ctx context.Context, storeID uuid.UUID, isActive bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenCloseStore", ctx, storeID, isActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenCloseStore indicates an expected call of OpenCloseStore.
func (mr *MockStoreServiceRepositoryMockRecorder) OpenCloseStore(ctx, storeID, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenCloseStore", reflect.TypeOf((*MockStoreServiceRepository)(nil).OpenCloseStore), ctx, storeID, isActive)
}

// UpdateStore mocks base method.
func (m *MockStoreServiceRepository) UpdateStore(ctx context.Context, storeID string, update *entity.Store) (*entity.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStore", ctx, storeID, update)
	ret0, _ := ret[0].(*entity.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStore indicates an expected call of UpdateStore.
func (mr *MockStoreServiceRepositoryMockRecorder) UpdateStore(ctx, storeID, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStore", reflect.TypeOf((*MockStoreServiceRepository)(nil).UpdateStore), ctx, storeID, update)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// UploadImage mocks base method.
func (m *MockStorage) UploadImage(ctx context.Context, image, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, image, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockStorageMockRecorder) UploadImage(ctx, image, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockStorage)(nil).UploadImage), ctx, image, userID)
}
