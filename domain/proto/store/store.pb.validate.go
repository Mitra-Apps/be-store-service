// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/store/store.proto

package store

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BaseModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseModelMultiError, or nil
// if none found.
func (m *BaseModel) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseModelValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseModelValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseModelValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedBy

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseModelValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseModelValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseModelValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedBy

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseModelValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseModelValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseModelValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedBy

	if len(errors) > 0 {
		return BaseModelMultiError(errors)
	}

	return nil
}

// BaseModelMultiError is an error wrapping multiple validation errors returned
// by BaseModel.ValidateAll() if the designated constraints aren't met.
type BaseModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseModelMultiError) AllErrors() []error { return m }

// BaseModelValidationError is the validation error returned by
// BaseModel.Validate if the designated constraints aren't met.
type BaseModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseModelValidationError) ErrorName() string { return "BaseModelValidationError" }

// Error satisfies the builtin error interface
func (e BaseModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseModelValidationError{}

// Validate checks the field values on StoreImage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoreImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoreImageMultiError, or
// nil if none found.
func (m *StoreImage) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for StoreId

	if l := utf8.RuneCountInString(m.GetImageType()); l < 1 || l > 255 {
		err := StoreImageValidationError{
			field:  "ImageType",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetImageUrl()); l < 1 || l > 255 {
		err := StoreImageValidationError{
			field:  "ImageUrl",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ImageBase64

	if len(errors) > 0 {
		return StoreImageMultiError(errors)
	}

	return nil
}

// StoreImageMultiError is an error wrapping multiple validation errors
// returned by StoreImage.ValidateAll() if the designated constraints aren't met.
type StoreImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreImageMultiError) AllErrors() []error { return m }

// StoreImageValidationError is the validation error returned by
// StoreImage.Validate if the designated constraints aren't met.
type StoreImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreImageValidationError) ErrorName() string { return "StoreImageValidationError" }

// Error satisfies the builtin error interface
func (e StoreImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreImageValidationError{}

// Validate checks the field values on StoreTag with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoreTag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreTag with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoreTagMultiError, or nil
// if none found.
func (m *StoreTag) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreTag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetTagName()); l < 1 || l > 255 {
		err := StoreTagValidationError{
			field:  "TagName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StoreTagMultiError(errors)
	}

	return nil
}

// StoreTagMultiError is an error wrapping multiple validation errors returned
// by StoreTag.ValidateAll() if the designated constraints aren't met.
type StoreTagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreTagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreTagMultiError) AllErrors() []error { return m }

// StoreTagValidationError is the validation error returned by
// StoreTag.Validate if the designated constraints aren't met.
type StoreTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreTagValidationError) ErrorName() string { return "StoreTagValidationError" }

// Error satisfies the builtin error interface
func (e StoreTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreTagValidationError{}

// Validate checks the field values on StoreHour with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoreHour) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreHour with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoreHourMultiError, or nil
// if none found.
func (m *StoreHour) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreHour) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for StoreId

	// no validation rules for DayOfWeek

	if !_StoreHour_Open_Pattern.MatchString(m.GetOpen()) {
		err := StoreHourValidationError{
			field:  "Open",
			reason: "value does not match regex pattern \"^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_StoreHour_Close_Pattern.MatchString(m.GetClose()) {
		err := StoreHourValidationError{
			field:  "Close",
			reason: "value does not match regex pattern \"^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Is24Hours

	if len(errors) > 0 {
		return StoreHourMultiError(errors)
	}

	return nil
}

// StoreHourMultiError is an error wrapping multiple validation errors returned
// by StoreHour.ValidateAll() if the designated constraints aren't met.
type StoreHourMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreHourMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreHourMultiError) AllErrors() []error { return m }

// StoreHourValidationError is the validation error returned by
// StoreHour.Validate if the designated constraints aren't met.
type StoreHourValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreHourValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreHourValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreHourValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreHourValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreHourValidationError) ErrorName() string { return "StoreHourValidationError" }

// Error satisfies the builtin error interface
func (e StoreHourValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreHour.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreHourValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreHourValidationError{}

var _StoreHour_Open_Pattern = regexp.MustCompile("^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$")

var _StoreHour_Close_Pattern = regexp.MustCompile("^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$")

// Validate checks the field values on Store with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Store) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Store with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StoreMultiError, or nil if none found.
func (m *Store) ValidateAll() error {
	return m.validate(true)
}

func (m *Store) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	if l := utf8.RuneCountInString(m.GetStoreName()); l < 1 || l > 255 {
		err := StoreValidationError{
			field:  "StoreName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetStoreDescription()); l < 1 || l > 512 {
		err := StoreValidationError{
			field:  "StoreDescription",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAddress()); l < 1 || l > 255 {
		err := StoreValidationError{
			field:  "Address",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCity()); l < 1 || l > 255 {
		err := StoreValidationError{
			field:  "City",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetState()); l < 1 || l > 255 {
		err := StoreValidationError{
			field:  "State",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetZipCode()); l < 1 || l > 255 {
		err := StoreValidationError{
			field:  "ZipCode",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPhone()); l < 1 || l > 255 {
		err := StoreValidationError{
			field:  "Phone",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = StoreValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Website

	// no validation rules for Status

	// no validation rules for IsActive

	// no validation rules for LocationLat

	// no validation rules for LocationLng

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoreValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoreValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoreValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHours() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoreValidationError{
						field:  fmt.Sprintf("Hours[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoreValidationError{
						field:  fmt.Sprintf("Hours[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoreValidationError{
					field:  fmt.Sprintf("Hours[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoreValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoreValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoreValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StoreMultiError(errors)
	}

	return nil
}

func (m *Store) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Store) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// StoreMultiError is an error wrapping multiple validation errors returned by
// Store.ValidateAll() if the designated constraints aren't met.
type StoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreMultiError) AllErrors() []error { return m }

// StoreValidationError is the validation error returned by Store.Validate if
// the designated constraints aren't met.
type StoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreValidationError) ErrorName() string { return "StoreValidationError" }

// Error satisfies the builtin error interface
func (e StoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreValidationError{}

// Validate checks the field values on ProductCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoryMultiError, or nil if none found.
func (m *ProductCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsActive

	if len(errors) > 0 {
		return ProductCategoryMultiError(errors)
	}

	return nil
}

// ProductCategoryMultiError is an error wrapping multiple validation errors
// returned by ProductCategory.ValidateAll() if the designated constraints
// aren't met.
type ProductCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoryMultiError) AllErrors() []error { return m }

// ProductCategoryValidationError is the validation error returned by
// ProductCategory.Validate if the designated constraints aren't met.
type ProductCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoryValidationError) ErrorName() string { return "ProductCategoryValidationError" }

// Error satisfies the builtin error interface
func (e ProductCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoryValidationError{}

// Validate checks the field values on ProductType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductTypeMultiError, or
// nil if none found.
func (m *ProductType) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsActive

	// no validation rules for ProductCategoryId

	if len(errors) > 0 {
		return ProductTypeMultiError(errors)
	}

	return nil
}

// ProductTypeMultiError is an error wrapping multiple validation errors
// returned by ProductType.ValidateAll() if the designated constraints aren't met.
type ProductTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductTypeMultiError) AllErrors() []error { return m }

// ProductTypeValidationError is the validation error returned by
// ProductType.Validate if the designated constraints aren't met.
type ProductTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductTypeValidationError) ErrorName() string { return "ProductTypeValidationError" }

// Error satisfies the builtin error interface
func (e ProductTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductTypeValidationError{}

// Validate checks the field values on UnitOfMeasure with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnitOfMeasure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnitOfMeasure with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnitOfMeasureMultiError, or
// nil if none found.
func (m *UnitOfMeasure) ValidateAll() error {
	return m.validate(true)
}

func (m *UnitOfMeasure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Symbol

	// no validation rules for IsActive

	if len(errors) > 0 {
		return UnitOfMeasureMultiError(errors)
	}

	return nil
}

// UnitOfMeasureMultiError is an error wrapping multiple validation errors
// returned by UnitOfMeasure.ValidateAll() if the designated constraints
// aren't met.
type UnitOfMeasureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnitOfMeasureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnitOfMeasureMultiError) AllErrors() []error { return m }

// UnitOfMeasureValidationError is the validation error returned by
// UnitOfMeasure.Validate if the designated constraints aren't met.
type UnitOfMeasureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnitOfMeasureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnitOfMeasureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnitOfMeasureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnitOfMeasureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnitOfMeasureValidationError) ErrorName() string { return "UnitOfMeasureValidationError" }

// Error satisfies the builtin error interface
func (e UnitOfMeasureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnitOfMeasure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnitOfMeasureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnitOfMeasureValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for StoreId

	// no validation rules for Name

	// no validation rules for SaleStatus

	// no validation rules for Price

	// no validation rules for Stock

	// no validation rules for UomId

	// no validation rules for ProductTypeId

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on CreateStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoreRequestMultiError, or nil if none found.
func (m *CreateStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoreRequestValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoreRequestValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoreRequestValidationError{
				field:  "Store",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStoreRequestMultiError(errors)
	}

	return nil
}

// CreateStoreRequestMultiError is an error wrapping multiple validation errors
// returned by CreateStoreRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoreRequestMultiError) AllErrors() []error { return m }

// CreateStoreRequestValidationError is the validation error returned by
// CreateStoreRequest.Validate if the designated constraints aren't met.
type CreateStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoreRequestValidationError) ErrorName() string {
	return "CreateStoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoreRequestValidationError{}

// Validate checks the field values on CreateStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStoreResponseMultiError, or nil if none found.
func (m *CreateStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStoreResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStoreResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStoreResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStoreResponseMultiError(errors)
	}

	return nil
}

// CreateStoreResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStoreResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStoreResponseMultiError) AllErrors() []error { return m }

// CreateStoreResponseValidationError is the validation error returned by
// CreateStoreResponse.Validate if the designated constraints aren't met.
type CreateStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStoreResponseValidationError) ErrorName() string {
	return "CreateStoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStoreResponseValidationError{}

// Validate checks the field values on GetStoreRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoreRequestMultiError, or nil if none found.
func (m *GetStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreId

	if len(errors) > 0 {
		return GetStoreRequestMultiError(errors)
	}

	return nil
}

// GetStoreRequestMultiError is an error wrapping multiple validation errors
// returned by GetStoreRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoreRequestMultiError) AllErrors() []error { return m }

// GetStoreRequestValidationError is the validation error returned by
// GetStoreRequest.Validate if the designated constraints aren't met.
type GetStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoreRequestValidationError) ErrorName() string { return "GetStoreRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoreRequestValidationError{}

// Validate checks the field values on GetStoreResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoreResponseMultiError, or nil if none found.
func (m *GetStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStoreResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStoreResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStoreResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStoreResponseMultiError(errors)
	}

	return nil
}

// GetStoreResponseMultiError is an error wrapping multiple validation errors
// returned by GetStoreResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoreResponseMultiError) AllErrors() []error { return m }

// GetStoreResponseValidationError is the validation error returned by
// GetStoreResponse.Validate if the designated constraints aren't met.
type GetStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoreResponseValidationError) ErrorName() string { return "GetStoreResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoreResponseValidationError{}

// Validate checks the field values on UpdateStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoreRequestMultiError, or nil if none found.
func (m *UpdateStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetStoreId()); l < 1 || l > 255 {
		err := UpdateStoreRequestValidationError{
			field:  "StoreId",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoreRequestValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoreRequestValidationError{
					field:  "Store",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoreRequestValidationError{
				field:  "Store",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStoreRequestMultiError(errors)
	}

	return nil
}

// UpdateStoreRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateStoreRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoreRequestMultiError) AllErrors() []error { return m }

// UpdateStoreRequestValidationError is the validation error returned by
// UpdateStoreRequest.Validate if the designated constraints aren't met.
type UpdateStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoreRequestValidationError) ErrorName() string {
	return "UpdateStoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoreRequestValidationError{}

// Validate checks the field values on UpdateStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStoreResponseMultiError, or nil if none found.
func (m *UpdateStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStoreResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStoreResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStoreResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStoreResponseMultiError(errors)
	}

	return nil
}

// UpdateStoreResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStoreResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStoreResponseMultiError) AllErrors() []error { return m }

// UpdateStoreResponseValidationError is the validation error returned by
// UpdateStoreResponse.Validate if the designated constraints aren't met.
type UpdateStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStoreResponseValidationError) ErrorName() string {
	return "UpdateStoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStoreResponseValidationError{}

// Validate checks the field values on DeleteStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStoreRequestMultiError, or nil if none found.
func (m *DeleteStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreId

	if len(errors) > 0 {
		return DeleteStoreRequestMultiError(errors)
	}

	return nil
}

// DeleteStoreRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteStoreRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStoreRequestMultiError) AllErrors() []error { return m }

// DeleteStoreRequestValidationError is the validation error returned by
// DeleteStoreRequest.Validate if the designated constraints aren't met.
type DeleteStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStoreRequestValidationError) ErrorName() string {
	return "DeleteStoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStoreRequestValidationError{}

// Validate checks the field values on ListStoresRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListStoresRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStoresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStoresRequestMultiError, or nil if none found.
func (m *ListStoresRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStoresRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListStoresRequestMultiError(errors)
	}

	return nil
}

// ListStoresRequestMultiError is an error wrapping multiple validation errors
// returned by ListStoresRequest.ValidateAll() if the designated constraints
// aren't met.
type ListStoresRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStoresRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStoresRequestMultiError) AllErrors() []error { return m }

// ListStoresRequestValidationError is the validation error returned by
// ListStoresRequest.Validate if the designated constraints aren't met.
type ListStoresRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStoresRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStoresRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStoresRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStoresRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStoresRequestValidationError) ErrorName() string {
	return "ListStoresRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStoresRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStoresRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStoresRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStoresRequestValidationError{}

// Validate checks the field values on ListStoresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStoresResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStoresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStoresResponseMultiError, or nil if none found.
func (m *ListStoresResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStoresResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStoresResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStoresResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStoresResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStoresResponseMultiError(errors)
	}

	return nil
}

// ListStoresResponseMultiError is an error wrapping multiple validation errors
// returned by ListStoresResponse.ValidateAll() if the designated constraints
// aren't met.
type ListStoresResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStoresResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStoresResponseMultiError) AllErrors() []error { return m }

// ListStoresResponseValidationError is the validation error returned by
// ListStoresResponse.Validate if the designated constraints aren't met.
type ListStoresResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStoresResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStoresResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStoresResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStoresResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStoresResponseValidationError) ErrorName() string {
	return "ListStoresResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStoresResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStoresResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStoresResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStoresResponseValidationError{}

// Validate checks the field values on OpenCloseStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenCloseStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenCloseStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenCloseStoreRequestMultiError, or nil if none found.
func (m *OpenCloseStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenCloseStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreId

	// no validation rules for IsActive

	if len(errors) > 0 {
		return OpenCloseStoreRequestMultiError(errors)
	}

	return nil
}

// OpenCloseStoreRequestMultiError is an error wrapping multiple validation
// errors returned by OpenCloseStoreRequest.ValidateAll() if the designated
// constraints aren't met.
type OpenCloseStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenCloseStoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenCloseStoreRequestMultiError) AllErrors() []error { return m }

// OpenCloseStoreRequestValidationError is the validation error returned by
// OpenCloseStoreRequest.Validate if the designated constraints aren't met.
type OpenCloseStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenCloseStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenCloseStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenCloseStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenCloseStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenCloseStoreRequestValidationError) ErrorName() string {
	return "OpenCloseStoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpenCloseStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenCloseStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenCloseStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenCloseStoreRequestValidationError{}

// Validate checks the field values on OpenCloseStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenCloseStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenCloseStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenCloseStoreResponseMultiError, or nil if none found.
func (m *OpenCloseStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenCloseStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return OpenCloseStoreResponseMultiError(errors)
	}

	return nil
}

// OpenCloseStoreResponseMultiError is an error wrapping multiple validation
// errors returned by OpenCloseStoreResponse.ValidateAll() if the designated
// constraints aren't met.
type OpenCloseStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenCloseStoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenCloseStoreResponseMultiError) AllErrors() []error { return m }

// OpenCloseStoreResponseValidationError is the validation error returned by
// OpenCloseStoreResponse.Validate if the designated constraints aren't met.
type OpenCloseStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenCloseStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenCloseStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenCloseStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenCloseStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenCloseStoreResponseValidationError) ErrorName() string {
	return "OpenCloseStoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OpenCloseStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenCloseStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenCloseStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenCloseStoreResponseValidationError{}

// Validate checks the field values on UpsertProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertProductsRequestMultiError, or nil if none found.
func (m *UpsertProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreId

	for idx, item := range m.GetProductList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertProductsRequestValidationError{
						field:  fmt.Sprintf("ProductList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertProductsRequestValidationError{
						field:  fmt.Sprintf("ProductList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertProductsRequestValidationError{
					field:  fmt.Sprintf("ProductList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertProductsRequestMultiError(errors)
	}

	return nil
}

// UpsertProductsRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertProductsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertProductsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertProductsRequestMultiError) AllErrors() []error { return m }

// UpsertProductsRequestValidationError is the validation error returned by
// UpsertProductsRequest.Validate if the designated constraints aren't met.
type UpsertProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductsRequestValidationError) ErrorName() string {
	return "UpsertProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductsRequestValidationError{}

// Validate checks the field values on UpsertProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertProductsResponseMultiError, or nil if none found.
func (m *UpsertProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpsertProductsResponseMultiError(errors)
	}

	return nil
}

// UpsertProductsResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertProductsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertProductsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertProductsResponseMultiError) AllErrors() []error { return m }

// UpsertProductsResponseValidationError is the validation error returned by
// UpsertProductsResponse.Validate if the designated constraints aren't met.
type UpsertProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductsResponseValidationError) ErrorName() string {
	return "UpsertProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductsResponseValidationError{}

// Validate checks the field values on UpsertUnitOfMeasureRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertUnitOfMeasureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertUnitOfMeasureRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertUnitOfMeasureRequestMultiError, or nil if none found.
func (m *UpsertUnitOfMeasureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertUnitOfMeasureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertUnitOfMeasureRequestValidationError{
					field:  "Uom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertUnitOfMeasureRequestValidationError{
					field:  "Uom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertUnitOfMeasureRequestValidationError{
				field:  "Uom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertUnitOfMeasureRequestMultiError(errors)
	}

	return nil
}

// UpsertUnitOfMeasureRequestMultiError is an error wrapping multiple
// validation errors returned by UpsertUnitOfMeasureRequest.ValidateAll() if
// the designated constraints aren't met.
type UpsertUnitOfMeasureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertUnitOfMeasureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertUnitOfMeasureRequestMultiError) AllErrors() []error { return m }

// UpsertUnitOfMeasureRequestValidationError is the validation error returned
// by UpsertUnitOfMeasureRequest.Validate if the designated constraints aren't met.
type UpsertUnitOfMeasureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertUnitOfMeasureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertUnitOfMeasureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertUnitOfMeasureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertUnitOfMeasureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertUnitOfMeasureRequestValidationError) ErrorName() string {
	return "UpsertUnitOfMeasureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertUnitOfMeasureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertUnitOfMeasureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertUnitOfMeasureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertUnitOfMeasureRequestValidationError{}

// Validate checks the field values on UpsertUnitOfMeasureResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertUnitOfMeasureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertUnitOfMeasureResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertUnitOfMeasureResponseMultiError, or nil if none found.
func (m *UpsertUnitOfMeasureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertUnitOfMeasureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpsertUnitOfMeasureResponseMultiError(errors)
	}

	return nil
}

// UpsertUnitOfMeasureResponseMultiError is an error wrapping multiple
// validation errors returned by UpsertUnitOfMeasureResponse.ValidateAll() if
// the designated constraints aren't met.
type UpsertUnitOfMeasureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertUnitOfMeasureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertUnitOfMeasureResponseMultiError) AllErrors() []error { return m }

// UpsertUnitOfMeasureResponseValidationError is the validation error returned
// by UpsertUnitOfMeasureResponse.Validate if the designated constraints
// aren't met.
type UpsertUnitOfMeasureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertUnitOfMeasureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertUnitOfMeasureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertUnitOfMeasureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertUnitOfMeasureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertUnitOfMeasureResponseValidationError) ErrorName() string {
	return "UpsertUnitOfMeasureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertUnitOfMeasureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertUnitOfMeasureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertUnitOfMeasureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertUnitOfMeasureResponseValidationError{}

// Validate checks the field values on UpsertProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertProductCategoryRequestMultiError, or nil if none found.
func (m *UpsertProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProductCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertProductCategoryRequestValidationError{
					field:  "ProductCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertProductCategoryRequestValidationError{
					field:  "ProductCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertProductCategoryRequestValidationError{
				field:  "ProductCategory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertProductCategoryRequestMultiError(errors)
	}

	return nil
}

// UpsertProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by UpsertProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type UpsertProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertProductCategoryRequestMultiError) AllErrors() []error { return m }

// UpsertProductCategoryRequestValidationError is the validation error returned
// by UpsertProductCategoryRequest.Validate if the designated constraints
// aren't met.
type UpsertProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductCategoryRequestValidationError) ErrorName() string {
	return "UpsertProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductCategoryRequestValidationError{}

// Validate checks the field values on UpsertProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertProductCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertProductCategoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpsertProductCategoryResponseMultiError, or nil if none found.
func (m *UpsertProductCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertProductCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpsertProductCategoryResponseMultiError(errors)
	}

	return nil
}

// UpsertProductCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by UpsertProductCategoryResponse.ValidateAll()
// if the designated constraints aren't met.
type UpsertProductCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertProductCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertProductCategoryResponseMultiError) AllErrors() []error { return m }

// UpsertProductCategoryResponseValidationError is the validation error
// returned by UpsertProductCategoryResponse.Validate if the designated
// constraints aren't met.
type UpsertProductCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductCategoryResponseValidationError) ErrorName() string {
	return "UpsertProductCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductCategoryResponseValidationError{}

// Validate checks the field values on UpsertProductTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertProductTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertProductTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertProductTypeRequestMultiError, or nil if none found.
func (m *UpsertProductTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertProductTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProductType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertProductTypeRequestValidationError{
					field:  "ProductType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertProductTypeRequestValidationError{
					field:  "ProductType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertProductTypeRequestValidationError{
				field:  "ProductType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertProductTypeRequestMultiError(errors)
	}

	return nil
}

// UpsertProductTypeRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertProductTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertProductTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertProductTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertProductTypeRequestMultiError) AllErrors() []error { return m }

// UpsertProductTypeRequestValidationError is the validation error returned by
// UpsertProductTypeRequest.Validate if the designated constraints aren't met.
type UpsertProductTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductTypeRequestValidationError) ErrorName() string {
	return "UpsertProductTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductTypeRequestValidationError{}

// Validate checks the field values on UpsertProductTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertProductTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertProductTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertProductTypeResponseMultiError, or nil if none found.
func (m *UpsertProductTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertProductTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpsertProductTypeResponseMultiError(errors)
	}

	return nil
}

// UpsertProductTypeResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertProductTypeResponse.ValidateAll() if the
// designated constraints aren't met.
type UpsertProductTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertProductTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertProductTypeResponseMultiError) AllErrors() []error { return m }

// UpsertProductTypeResponseValidationError is the validation error returned by
// UpsertProductTypeResponse.Validate if the designated constraints aren't met.
type UpsertProductTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductTypeResponseValidationError) ErrorName() string {
	return "UpsertProductTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductTypeResponseValidationError{}
