// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/store/store.proto

package storeconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	store "github.com/Mitra-Apps/be-store-service/domain/proto/store"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoreServiceName is the fully-qualified name of the StoreService service.
	StoreServiceName = "StoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoreServiceCreateStoreProcedure is the fully-qualified name of the StoreService's CreateStore
	// RPC.
	StoreServiceCreateStoreProcedure = "/StoreService/CreateStore"
	// StoreServiceGetStoreProcedure is the fully-qualified name of the StoreService's GetStore RPC.
	StoreServiceGetStoreProcedure = "/StoreService/GetStore"
	// StoreServiceUpdateStoreProcedure is the fully-qualified name of the StoreService's UpdateStore
	// RPC.
	StoreServiceUpdateStoreProcedure = "/StoreService/UpdateStore"
	// StoreServiceDeleteStoreProcedure is the fully-qualified name of the StoreService's DeleteStore
	// RPC.
	StoreServiceDeleteStoreProcedure = "/StoreService/DeleteStore"
	// StoreServiceListStoresProcedure is the fully-qualified name of the StoreService's ListStores RPC.
	StoreServiceListStoresProcedure = "/StoreService/ListStores"
	// StoreServiceGetStoreByUserIDProcedure is the fully-qualified name of the StoreService's
	// GetStoreByUserID RPC.
	StoreServiceGetStoreByUserIDProcedure = "/StoreService/GetStoreByUserID"
	// StoreServiceOpenCloseStoreProcedure is the fully-qualified name of the StoreService's
	// OpenCloseStore RPC.
	StoreServiceOpenCloseStoreProcedure = "/StoreService/OpenCloseStore"
	// StoreServiceGetProductByIdProcedure is the fully-qualified name of the StoreService's
	// GetProductById RPC.
	StoreServiceGetProductByIdProcedure = "/StoreService/GetProductById"
	// StoreServiceGetProductListProcedure is the fully-qualified name of the StoreService's
	// GetProductList RPC.
	StoreServiceGetProductListProcedure = "/StoreService/GetProductList"
	// StoreServiceUpsertProductsProcedure is the fully-qualified name of the StoreService's
	// UpsertProducts RPC.
	StoreServiceUpsertProductsProcedure = "/StoreService/UpsertProducts"
	// StoreServiceGetUnitOfMeasuresProcedure is the fully-qualified name of the StoreService's
	// GetUnitOfMeasures RPC.
	StoreServiceGetUnitOfMeasuresProcedure = "/StoreService/GetUnitOfMeasures"
	// StoreServiceUpsertUnitOfMeasureProcedure is the fully-qualified name of the StoreService's
	// UpsertUnitOfMeasure RPC.
	StoreServiceUpsertUnitOfMeasureProcedure = "/StoreService/UpsertUnitOfMeasure"
	// StoreServiceUpdateUnitOfMeasureProcedure is the fully-qualified name of the StoreService's
	// UpdateUnitOfMeasure RPC.
	StoreServiceUpdateUnitOfMeasureProcedure = "/StoreService/UpdateUnitOfMeasure"
	// StoreServiceGetProductCategoriesProcedure is the fully-qualified name of the StoreService's
	// GetProductCategories RPC.
	StoreServiceGetProductCategoriesProcedure = "/StoreService/GetProductCategories"
	// StoreServiceUpsertProductCategoryProcedure is the fully-qualified name of the StoreService's
	// UpsertProductCategory RPC.
	StoreServiceUpsertProductCategoryProcedure = "/StoreService/UpsertProductCategory"
	// StoreServiceGetProductTypesProcedure is the fully-qualified name of the StoreService's
	// GetProductTypes RPC.
	StoreServiceGetProductTypesProcedure = "/StoreService/GetProductTypes"
	// StoreServiceUpsertProductTypeProcedure is the fully-qualified name of the StoreService's
	// UpsertProductType RPC.
	StoreServiceUpsertProductTypeProcedure = "/StoreService/UpsertProductType"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storeServiceServiceDescriptor                     = store.File_proto_store_store_proto.Services().ByName("StoreService")
	storeServiceCreateStoreMethodDescriptor           = storeServiceServiceDescriptor.Methods().ByName("CreateStore")
	storeServiceGetStoreMethodDescriptor              = storeServiceServiceDescriptor.Methods().ByName("GetStore")
	storeServiceUpdateStoreMethodDescriptor           = storeServiceServiceDescriptor.Methods().ByName("UpdateStore")
	storeServiceDeleteStoreMethodDescriptor           = storeServiceServiceDescriptor.Methods().ByName("DeleteStore")
	storeServiceListStoresMethodDescriptor            = storeServiceServiceDescriptor.Methods().ByName("ListStores")
	storeServiceGetStoreByUserIDMethodDescriptor      = storeServiceServiceDescriptor.Methods().ByName("GetStoreByUserID")
	storeServiceOpenCloseStoreMethodDescriptor        = storeServiceServiceDescriptor.Methods().ByName("OpenCloseStore")
	storeServiceGetProductByIdMethodDescriptor        = storeServiceServiceDescriptor.Methods().ByName("GetProductById")
	storeServiceGetProductListMethodDescriptor        = storeServiceServiceDescriptor.Methods().ByName("GetProductList")
	storeServiceUpsertProductsMethodDescriptor        = storeServiceServiceDescriptor.Methods().ByName("UpsertProducts")
	storeServiceGetUnitOfMeasuresMethodDescriptor     = storeServiceServiceDescriptor.Methods().ByName("GetUnitOfMeasures")
	storeServiceUpsertUnitOfMeasureMethodDescriptor   = storeServiceServiceDescriptor.Methods().ByName("UpsertUnitOfMeasure")
	storeServiceUpdateUnitOfMeasureMethodDescriptor   = storeServiceServiceDescriptor.Methods().ByName("UpdateUnitOfMeasure")
	storeServiceGetProductCategoriesMethodDescriptor  = storeServiceServiceDescriptor.Methods().ByName("GetProductCategories")
	storeServiceUpsertProductCategoryMethodDescriptor = storeServiceServiceDescriptor.Methods().ByName("UpsertProductCategory")
	storeServiceGetProductTypesMethodDescriptor       = storeServiceServiceDescriptor.Methods().ByName("GetProductTypes")
	storeServiceUpsertProductTypeMethodDescriptor     = storeServiceServiceDescriptor.Methods().ByName("UpsertProductType")
)

// StoreServiceClient is a client for the StoreService service.
type StoreServiceClient interface {
	// Create a new store
	CreateStore(context.Context, *connect.Request[store.CreateStoreRequest]) (*connect.Response[store.CreateStoreResponse], error)
	// Get a store by ID
	GetStore(context.Context, *connect.Request[store.GetStoreRequest]) (*connect.Response[store.GetStoreResponse], error)
	// Update an existing store
	UpdateStore(context.Context, *connect.Request[store.UpdateStoreRequest]) (*connect.Response[store.UpdateStoreResponse], error)
	// Delete a store by ID
	DeleteStore(context.Context, *connect.Request[store.DeleteStoreRequest]) (*connect.Response[emptypb.Empty], error)
	// List all stores
	ListStores(context.Context, *connect.Request[store.ListStoresRequest]) (*connect.Response[store.ListStoresResponse], error)
	// Get Store By User ID
	GetStoreByUserID(context.Context, *connect.Request[store.GetStoreByUserIDRequest]) (*connect.Response[store.GetStoreByUserIDResponse], error)
	// Open close store
	OpenCloseStore(context.Context, *connect.Request[store.OpenCloseStoreRequest]) (*connect.Response[store.OpenCloseStoreResponse], error)
	GetProductById(context.Context, *connect.Request[store.GetProductByIdRequest]) (*connect.Response[store.GetProductByIdResponse], error)
	GetProductList(context.Context, *connect.Request[store.GetProductListRequest]) (*connect.Response[store.GetProductListResponse], error)
	UpsertProducts(context.Context, *connect.Request[store.UpsertProductsRequest]) (*connect.Response[store.UpsertProductsResponse], error)
	GetUnitOfMeasures(context.Context, *connect.Request[store.GetUnitOfMeasuresRequest]) (*connect.Response[store.GetUnitOfMeasuresResponse], error)
	UpsertUnitOfMeasure(context.Context, *connect.Request[store.UpsertUnitOfMeasureRequest]) (*connect.Response[store.UpsertUnitOfMeasureResponse], error)
	UpdateUnitOfMeasure(context.Context, *connect.Request[store.UpdateUnitOfMeasureRequest]) (*connect.Response[store.UpdateUnitOfMeasureResponse], error)
	GetProductCategories(context.Context, *connect.Request[store.GetProductCategoriesRequest]) (*connect.Response[store.GetProductCategoriesResponse], error)
	UpsertProductCategory(context.Context, *connect.Request[store.UpsertProductCategoryRequest]) (*connect.Response[store.UpsertProductCategoryResponse], error)
	GetProductTypes(context.Context, *connect.Request[store.GetProductTypesRequest]) (*connect.Response[store.GetProductTypesResponse], error)
	UpsertProductType(context.Context, *connect.Request[store.UpsertProductTypeRequest]) (*connect.Response[store.UpsertProductTypeResponse], error)
}

// NewStoreServiceClient constructs a client for the StoreService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storeServiceClient{
		createStore: connect.NewClient[store.CreateStoreRequest, store.CreateStoreResponse](
			httpClient,
			baseURL+StoreServiceCreateStoreProcedure,
			connect.WithSchema(storeServiceCreateStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStore: connect.NewClient[store.GetStoreRequest, store.GetStoreResponse](
			httpClient,
			baseURL+StoreServiceGetStoreProcedure,
			connect.WithSchema(storeServiceGetStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateStore: connect.NewClient[store.UpdateStoreRequest, store.UpdateStoreResponse](
			httpClient,
			baseURL+StoreServiceUpdateStoreProcedure,
			connect.WithSchema(storeServiceUpdateStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteStore: connect.NewClient[store.DeleteStoreRequest, emptypb.Empty](
			httpClient,
			baseURL+StoreServiceDeleteStoreProcedure,
			connect.WithSchema(storeServiceDeleteStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listStores: connect.NewClient[store.ListStoresRequest, store.ListStoresResponse](
			httpClient,
			baseURL+StoreServiceListStoresProcedure,
			connect.WithSchema(storeServiceListStoresMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStoreByUserID: connect.NewClient[store.GetStoreByUserIDRequest, store.GetStoreByUserIDResponse](
			httpClient,
			baseURL+StoreServiceGetStoreByUserIDProcedure,
			connect.WithSchema(storeServiceGetStoreByUserIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		openCloseStore: connect.NewClient[store.OpenCloseStoreRequest, store.OpenCloseStoreResponse](
			httpClient,
			baseURL+StoreServiceOpenCloseStoreProcedure,
			connect.WithSchema(storeServiceOpenCloseStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProductById: connect.NewClient[store.GetProductByIdRequest, store.GetProductByIdResponse](
			httpClient,
			baseURL+StoreServiceGetProductByIdProcedure,
			connect.WithSchema(storeServiceGetProductByIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProductList: connect.NewClient[store.GetProductListRequest, store.GetProductListResponse](
			httpClient,
			baseURL+StoreServiceGetProductListProcedure,
			connect.WithSchema(storeServiceGetProductListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		upsertProducts: connect.NewClient[store.UpsertProductsRequest, store.UpsertProductsResponse](
			httpClient,
			baseURL+StoreServiceUpsertProductsProcedure,
			connect.WithSchema(storeServiceUpsertProductsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUnitOfMeasures: connect.NewClient[store.GetUnitOfMeasuresRequest, store.GetUnitOfMeasuresResponse](
			httpClient,
			baseURL+StoreServiceGetUnitOfMeasuresProcedure,
			connect.WithSchema(storeServiceGetUnitOfMeasuresMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		upsertUnitOfMeasure: connect.NewClient[store.UpsertUnitOfMeasureRequest, store.UpsertUnitOfMeasureResponse](
			httpClient,
			baseURL+StoreServiceUpsertUnitOfMeasureProcedure,
			connect.WithSchema(storeServiceUpsertUnitOfMeasureMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUnitOfMeasure: connect.NewClient[store.UpdateUnitOfMeasureRequest, store.UpdateUnitOfMeasureResponse](
			httpClient,
			baseURL+StoreServiceUpdateUnitOfMeasureProcedure,
			connect.WithSchema(storeServiceUpdateUnitOfMeasureMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProductCategories: connect.NewClient[store.GetProductCategoriesRequest, store.GetProductCategoriesResponse](
			httpClient,
			baseURL+StoreServiceGetProductCategoriesProcedure,
			connect.WithSchema(storeServiceGetProductCategoriesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		upsertProductCategory: connect.NewClient[store.UpsertProductCategoryRequest, store.UpsertProductCategoryResponse](
			httpClient,
			baseURL+StoreServiceUpsertProductCategoryProcedure,
			connect.WithSchema(storeServiceUpsertProductCategoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProductTypes: connect.NewClient[store.GetProductTypesRequest, store.GetProductTypesResponse](
			httpClient,
			baseURL+StoreServiceGetProductTypesProcedure,
			connect.WithSchema(storeServiceGetProductTypesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		upsertProductType: connect.NewClient[store.UpsertProductTypeRequest, store.UpsertProductTypeResponse](
			httpClient,
			baseURL+StoreServiceUpsertProductTypeProcedure,
			connect.WithSchema(storeServiceUpsertProductTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storeServiceClient implements StoreServiceClient.
type storeServiceClient struct {
	createStore           *connect.Client[store.CreateStoreRequest, store.CreateStoreResponse]
	getStore              *connect.Client[store.GetStoreRequest, store.GetStoreResponse]
	updateStore           *connect.Client[store.UpdateStoreRequest, store.UpdateStoreResponse]
	deleteStore           *connect.Client[store.DeleteStoreRequest, emptypb.Empty]
	listStores            *connect.Client[store.ListStoresRequest, store.ListStoresResponse]
	getStoreByUserID      *connect.Client[store.GetStoreByUserIDRequest, store.GetStoreByUserIDResponse]
	openCloseStore        *connect.Client[store.OpenCloseStoreRequest, store.OpenCloseStoreResponse]
	getProductById        *connect.Client[store.GetProductByIdRequest, store.GetProductByIdResponse]
	getProductList        *connect.Client[store.GetProductListRequest, store.GetProductListResponse]
	upsertProducts        *connect.Client[store.UpsertProductsRequest, store.UpsertProductsResponse]
	getUnitOfMeasures     *connect.Client[store.GetUnitOfMeasuresRequest, store.GetUnitOfMeasuresResponse]
	upsertUnitOfMeasure   *connect.Client[store.UpsertUnitOfMeasureRequest, store.UpsertUnitOfMeasureResponse]
	updateUnitOfMeasure   *connect.Client[store.UpdateUnitOfMeasureRequest, store.UpdateUnitOfMeasureResponse]
	getProductCategories  *connect.Client[store.GetProductCategoriesRequest, store.GetProductCategoriesResponse]
	upsertProductCategory *connect.Client[store.UpsertProductCategoryRequest, store.UpsertProductCategoryResponse]
	getProductTypes       *connect.Client[store.GetProductTypesRequest, store.GetProductTypesResponse]
	upsertProductType     *connect.Client[store.UpsertProductTypeRequest, store.UpsertProductTypeResponse]
}

// CreateStore calls StoreService.CreateStore.
func (c *storeServiceClient) CreateStore(ctx context.Context, req *connect.Request[store.CreateStoreRequest]) (*connect.Response[store.CreateStoreResponse], error) {
	return c.createStore.CallUnary(ctx, req)
}

// GetStore calls StoreService.GetStore.
func (c *storeServiceClient) GetStore(ctx context.Context, req *connect.Request[store.GetStoreRequest]) (*connect.Response[store.GetStoreResponse], error) {
	return c.getStore.CallUnary(ctx, req)
}

// UpdateStore calls StoreService.UpdateStore.
func (c *storeServiceClient) UpdateStore(ctx context.Context, req *connect.Request[store.UpdateStoreRequest]) (*connect.Response[store.UpdateStoreResponse], error) {
	return c.updateStore.CallUnary(ctx, req)
}

// DeleteStore calls StoreService.DeleteStore.
func (c *storeServiceClient) DeleteStore(ctx context.Context, req *connect.Request[store.DeleteStoreRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteStore.CallUnary(ctx, req)
}

// ListStores calls StoreService.ListStores.
func (c *storeServiceClient) ListStores(ctx context.Context, req *connect.Request[store.ListStoresRequest]) (*connect.Response[store.ListStoresResponse], error) {
	return c.listStores.CallUnary(ctx, req)
}

// GetStoreByUserID calls StoreService.GetStoreByUserID.
func (c *storeServiceClient) GetStoreByUserID(ctx context.Context, req *connect.Request[store.GetStoreByUserIDRequest]) (*connect.Response[store.GetStoreByUserIDResponse], error) {
	return c.getStoreByUserID.CallUnary(ctx, req)
}

// OpenCloseStore calls StoreService.OpenCloseStore.
func (c *storeServiceClient) OpenCloseStore(ctx context.Context, req *connect.Request[store.OpenCloseStoreRequest]) (*connect.Response[store.OpenCloseStoreResponse], error) {
	return c.openCloseStore.CallUnary(ctx, req)
}

// GetProductById calls StoreService.GetProductById.
func (c *storeServiceClient) GetProductById(ctx context.Context, req *connect.Request[store.GetProductByIdRequest]) (*connect.Response[store.GetProductByIdResponse], error) {
	return c.getProductById.CallUnary(ctx, req)
}

// GetProductList calls StoreService.GetProductList.
func (c *storeServiceClient) GetProductList(ctx context.Context, req *connect.Request[store.GetProductListRequest]) (*connect.Response[store.GetProductListResponse], error) {
	return c.getProductList.CallUnary(ctx, req)
}

// UpsertProducts calls StoreService.UpsertProducts.
func (c *storeServiceClient) UpsertProducts(ctx context.Context, req *connect.Request[store.UpsertProductsRequest]) (*connect.Response[store.UpsertProductsResponse], error) {
	return c.upsertProducts.CallUnary(ctx, req)
}

// GetUnitOfMeasures calls StoreService.GetUnitOfMeasures.
func (c *storeServiceClient) GetUnitOfMeasures(ctx context.Context, req *connect.Request[store.GetUnitOfMeasuresRequest]) (*connect.Response[store.GetUnitOfMeasuresResponse], error) {
	return c.getUnitOfMeasures.CallUnary(ctx, req)
}

// UpsertUnitOfMeasure calls StoreService.UpsertUnitOfMeasure.
func (c *storeServiceClient) UpsertUnitOfMeasure(ctx context.Context, req *connect.Request[store.UpsertUnitOfMeasureRequest]) (*connect.Response[store.UpsertUnitOfMeasureResponse], error) {
	return c.upsertUnitOfMeasure.CallUnary(ctx, req)
}

// UpdateUnitOfMeasure calls StoreService.UpdateUnitOfMeasure.
func (c *storeServiceClient) UpdateUnitOfMeasure(ctx context.Context, req *connect.Request[store.UpdateUnitOfMeasureRequest]) (*connect.Response[store.UpdateUnitOfMeasureResponse], error) {
	return c.updateUnitOfMeasure.CallUnary(ctx, req)
}

// GetProductCategories calls StoreService.GetProductCategories.
func (c *storeServiceClient) GetProductCategories(ctx context.Context, req *connect.Request[store.GetProductCategoriesRequest]) (*connect.Response[store.GetProductCategoriesResponse], error) {
	return c.getProductCategories.CallUnary(ctx, req)
}

// UpsertProductCategory calls StoreService.UpsertProductCategory.
func (c *storeServiceClient) UpsertProductCategory(ctx context.Context, req *connect.Request[store.UpsertProductCategoryRequest]) (*connect.Response[store.UpsertProductCategoryResponse], error) {
	return c.upsertProductCategory.CallUnary(ctx, req)
}

// GetProductTypes calls StoreService.GetProductTypes.
func (c *storeServiceClient) GetProductTypes(ctx context.Context, req *connect.Request[store.GetProductTypesRequest]) (*connect.Response[store.GetProductTypesResponse], error) {
	return c.getProductTypes.CallUnary(ctx, req)
}

// UpsertProductType calls StoreService.UpsertProductType.
func (c *storeServiceClient) UpsertProductType(ctx context.Context, req *connect.Request[store.UpsertProductTypeRequest]) (*connect.Response[store.UpsertProductTypeResponse], error) {
	return c.upsertProductType.CallUnary(ctx, req)
}

// StoreServiceHandler is an implementation of the StoreService service.
type StoreServiceHandler interface {
	// Create a new store
	CreateStore(context.Context, *connect.Request[store.CreateStoreRequest]) (*connect.Response[store.CreateStoreResponse], error)
	// Get a store by ID
	GetStore(context.Context, *connect.Request[store.GetStoreRequest]) (*connect.Response[store.GetStoreResponse], error)
	// Update an existing store
	UpdateStore(context.Context, *connect.Request[store.UpdateStoreRequest]) (*connect.Response[store.UpdateStoreResponse], error)
	// Delete a store by ID
	DeleteStore(context.Context, *connect.Request[store.DeleteStoreRequest]) (*connect.Response[emptypb.Empty], error)
	// List all stores
	ListStores(context.Context, *connect.Request[store.ListStoresRequest]) (*connect.Response[store.ListStoresResponse], error)
	// Get Store By User ID
	GetStoreByUserID(context.Context, *connect.Request[store.GetStoreByUserIDRequest]) (*connect.Response[store.GetStoreByUserIDResponse], error)
	// Open close store
	OpenCloseStore(context.Context, *connect.Request[store.OpenCloseStoreRequest]) (*connect.Response[store.OpenCloseStoreResponse], error)
	GetProductById(context.Context, *connect.Request[store.GetProductByIdRequest]) (*connect.Response[store.GetProductByIdResponse], error)
	GetProductList(context.Context, *connect.Request[store.GetProductListRequest]) (*connect.Response[store.GetProductListResponse], error)
	UpsertProducts(context.Context, *connect.Request[store.UpsertProductsRequest]) (*connect.Response[store.UpsertProductsResponse], error)
	GetUnitOfMeasures(context.Context, *connect.Request[store.GetUnitOfMeasuresRequest]) (*connect.Response[store.GetUnitOfMeasuresResponse], error)
	UpsertUnitOfMeasure(context.Context, *connect.Request[store.UpsertUnitOfMeasureRequest]) (*connect.Response[store.UpsertUnitOfMeasureResponse], error)
	UpdateUnitOfMeasure(context.Context, *connect.Request[store.UpdateUnitOfMeasureRequest]) (*connect.Response[store.UpdateUnitOfMeasureResponse], error)
	GetProductCategories(context.Context, *connect.Request[store.GetProductCategoriesRequest]) (*connect.Response[store.GetProductCategoriesResponse], error)
	UpsertProductCategory(context.Context, *connect.Request[store.UpsertProductCategoryRequest]) (*connect.Response[store.UpsertProductCategoryResponse], error)
	GetProductTypes(context.Context, *connect.Request[store.GetProductTypesRequest]) (*connect.Response[store.GetProductTypesResponse], error)
	UpsertProductType(context.Context, *connect.Request[store.UpsertProductTypeRequest]) (*connect.Response[store.UpsertProductTypeResponse], error)
}

// NewStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoreServiceHandler(svc StoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storeServiceCreateStoreHandler := connect.NewUnaryHandler(
		StoreServiceCreateStoreProcedure,
		svc.CreateStore,
		connect.WithSchema(storeServiceCreateStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceGetStoreHandler := connect.NewUnaryHandler(
		StoreServiceGetStoreProcedure,
		svc.GetStore,
		connect.WithSchema(storeServiceGetStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceUpdateStoreHandler := connect.NewUnaryHandler(
		StoreServiceUpdateStoreProcedure,
		svc.UpdateStore,
		connect.WithSchema(storeServiceUpdateStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceDeleteStoreHandler := connect.NewUnaryHandler(
		StoreServiceDeleteStoreProcedure,
		svc.DeleteStore,
		connect.WithSchema(storeServiceDeleteStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceListStoresHandler := connect.NewUnaryHandler(
		StoreServiceListStoresProcedure,
		svc.ListStores,
		connect.WithSchema(storeServiceListStoresMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceGetStoreByUserIDHandler := connect.NewUnaryHandler(
		StoreServiceGetStoreByUserIDProcedure,
		svc.GetStoreByUserID,
		connect.WithSchema(storeServiceGetStoreByUserIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceOpenCloseStoreHandler := connect.NewUnaryHandler(
		StoreServiceOpenCloseStoreProcedure,
		svc.OpenCloseStore,
		connect.WithSchema(storeServiceOpenCloseStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceGetProductByIdHandler := connect.NewUnaryHandler(
		StoreServiceGetProductByIdProcedure,
		svc.GetProductById,
		connect.WithSchema(storeServiceGetProductByIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceGetProductListHandler := connect.NewUnaryHandler(
		StoreServiceGetProductListProcedure,
		svc.GetProductList,
		connect.WithSchema(storeServiceGetProductListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceUpsertProductsHandler := connect.NewUnaryHandler(
		StoreServiceUpsertProductsProcedure,
		svc.UpsertProducts,
		connect.WithSchema(storeServiceUpsertProductsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceGetUnitOfMeasuresHandler := connect.NewUnaryHandler(
		StoreServiceGetUnitOfMeasuresProcedure,
		svc.GetUnitOfMeasures,
		connect.WithSchema(storeServiceGetUnitOfMeasuresMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceUpsertUnitOfMeasureHandler := connect.NewUnaryHandler(
		StoreServiceUpsertUnitOfMeasureProcedure,
		svc.UpsertUnitOfMeasure,
		connect.WithSchema(storeServiceUpsertUnitOfMeasureMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceUpdateUnitOfMeasureHandler := connect.NewUnaryHandler(
		StoreServiceUpdateUnitOfMeasureProcedure,
		svc.UpdateUnitOfMeasure,
		connect.WithSchema(storeServiceUpdateUnitOfMeasureMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceGetProductCategoriesHandler := connect.NewUnaryHandler(
		StoreServiceGetProductCategoriesProcedure,
		svc.GetProductCategories,
		connect.WithSchema(storeServiceGetProductCategoriesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceUpsertProductCategoryHandler := connect.NewUnaryHandler(
		StoreServiceUpsertProductCategoryProcedure,
		svc.UpsertProductCategory,
		connect.WithSchema(storeServiceUpsertProductCategoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceGetProductTypesHandler := connect.NewUnaryHandler(
		StoreServiceGetProductTypesProcedure,
		svc.GetProductTypes,
		connect.WithSchema(storeServiceGetProductTypesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceUpsertProductTypeHandler := connect.NewUnaryHandler(
		StoreServiceUpsertProductTypeProcedure,
		svc.UpsertProductType,
		connect.WithSchema(storeServiceUpsertProductTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/StoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoreServiceCreateStoreProcedure:
			storeServiceCreateStoreHandler.ServeHTTP(w, r)
		case StoreServiceGetStoreProcedure:
			storeServiceGetStoreHandler.ServeHTTP(w, r)
		case StoreServiceUpdateStoreProcedure:
			storeServiceUpdateStoreHandler.ServeHTTP(w, r)
		case StoreServiceDeleteStoreProcedure:
			storeServiceDeleteStoreHandler.ServeHTTP(w, r)
		case StoreServiceListStoresProcedure:
			storeServiceListStoresHandler.ServeHTTP(w, r)
		case StoreServiceGetStoreByUserIDProcedure:
			storeServiceGetStoreByUserIDHandler.ServeHTTP(w, r)
		case StoreServiceOpenCloseStoreProcedure:
			storeServiceOpenCloseStoreHandler.ServeHTTP(w, r)
		case StoreServiceGetProductByIdProcedure:
			storeServiceGetProductByIdHandler.ServeHTTP(w, r)
		case StoreServiceGetProductListProcedure:
			storeServiceGetProductListHandler.ServeHTTP(w, r)
		case StoreServiceUpsertProductsProcedure:
			storeServiceUpsertProductsHandler.ServeHTTP(w, r)
		case StoreServiceGetUnitOfMeasuresProcedure:
			storeServiceGetUnitOfMeasuresHandler.ServeHTTP(w, r)
		case StoreServiceUpsertUnitOfMeasureProcedure:
			storeServiceUpsertUnitOfMeasureHandler.ServeHTTP(w, r)
		case StoreServiceUpdateUnitOfMeasureProcedure:
			storeServiceUpdateUnitOfMeasureHandler.ServeHTTP(w, r)
		case StoreServiceGetProductCategoriesProcedure:
			storeServiceGetProductCategoriesHandler.ServeHTTP(w, r)
		case StoreServiceUpsertProductCategoryProcedure:
			storeServiceUpsertProductCategoryHandler.ServeHTTP(w, r)
		case StoreServiceGetProductTypesProcedure:
			storeServiceGetProductTypesHandler.ServeHTTP(w, r)
		case StoreServiceUpsertProductTypeProcedure:
			storeServiceUpsertProductTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStoreServiceHandler struct{}

func (UnimplementedStoreServiceHandler) CreateStore(context.Context, *connect.Request[store.CreateStoreRequest]) (*connect.Response[store.CreateStoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.CreateStore is not implemented"))
}

func (UnimplementedStoreServiceHandler) GetStore(context.Context, *connect.Request[store.GetStoreRequest]) (*connect.Response[store.GetStoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.GetStore is not implemented"))
}

func (UnimplementedStoreServiceHandler) UpdateStore(context.Context, *connect.Request[store.UpdateStoreRequest]) (*connect.Response[store.UpdateStoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.UpdateStore is not implemented"))
}

func (UnimplementedStoreServiceHandler) DeleteStore(context.Context, *connect.Request[store.DeleteStoreRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.DeleteStore is not implemented"))
}

func (UnimplementedStoreServiceHandler) ListStores(context.Context, *connect.Request[store.ListStoresRequest]) (*connect.Response[store.ListStoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.ListStores is not implemented"))
}

func (UnimplementedStoreServiceHandler) GetStoreByUserID(context.Context, *connect.Request[store.GetStoreByUserIDRequest]) (*connect.Response[store.GetStoreByUserIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.GetStoreByUserID is not implemented"))
}

func (UnimplementedStoreServiceHandler) OpenCloseStore(context.Context, *connect.Request[store.OpenCloseStoreRequest]) (*connect.Response[store.OpenCloseStoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.OpenCloseStore is not implemented"))
}

func (UnimplementedStoreServiceHandler) GetProductById(context.Context, *connect.Request[store.GetProductByIdRequest]) (*connect.Response[store.GetProductByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.GetProductById is not implemented"))
}

func (UnimplementedStoreServiceHandler) GetProductList(context.Context, *connect.Request[store.GetProductListRequest]) (*connect.Response[store.GetProductListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.GetProductList is not implemented"))
}

func (UnimplementedStoreServiceHandler) UpsertProducts(context.Context, *connect.Request[store.UpsertProductsRequest]) (*connect.Response[store.UpsertProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.UpsertProducts is not implemented"))
}

func (UnimplementedStoreServiceHandler) GetUnitOfMeasures(context.Context, *connect.Request[store.GetUnitOfMeasuresRequest]) (*connect.Response[store.GetUnitOfMeasuresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.GetUnitOfMeasures is not implemented"))
}

func (UnimplementedStoreServiceHandler) UpsertUnitOfMeasure(context.Context, *connect.Request[store.UpsertUnitOfMeasureRequest]) (*connect.Response[store.UpsertUnitOfMeasureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.UpsertUnitOfMeasure is not implemented"))
}

func (UnimplementedStoreServiceHandler) UpdateUnitOfMeasure(context.Context, *connect.Request[store.UpdateUnitOfMeasureRequest]) (*connect.Response[store.UpdateUnitOfMeasureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.UpdateUnitOfMeasure is not implemented"))
}

func (UnimplementedStoreServiceHandler) GetProductCategories(context.Context, *connect.Request[store.GetProductCategoriesRequest]) (*connect.Response[store.GetProductCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.GetProductCategories is not implemented"))
}

func (UnimplementedStoreServiceHandler) UpsertProductCategory(context.Context, *connect.Request[store.UpsertProductCategoryRequest]) (*connect.Response[store.UpsertProductCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.UpsertProductCategory is not implemented"))
}

func (UnimplementedStoreServiceHandler) GetProductTypes(context.Context, *connect.Request[store.GetProductTypesRequest]) (*connect.Response[store.GetProductTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.GetProductTypes is not implemented"))
}

func (UnimplementedStoreServiceHandler) UpsertProductType(context.Context, *connect.Request[store.UpsertProductTypeRequest]) (*connect.Response[store.UpsertProductTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StoreService.UpsertProductType is not implemented"))
}
