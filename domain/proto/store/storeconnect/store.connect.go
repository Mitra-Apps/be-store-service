// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/store/store.proto

package storeconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	store "github.com/Mitra-Apps/be-store-service/domain/proto/store"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoreServiceName is the fully-qualified name of the StoreService service.
	StoreServiceName = "proto.StoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoreServiceGetStoresProcedure is the fully-qualified name of the StoreService's GetStores RPC.
	StoreServiceGetStoresProcedure = "/proto.StoreService/GetStores"
	// StoreServiceGetStoreProcedure is the fully-qualified name of the StoreService's GetStore RPC.
	StoreServiceGetStoreProcedure = "/proto.StoreService/GetStore"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storeServiceServiceDescriptor         = store.File_proto_store_store_proto.Services().ByName("StoreService")
	storeServiceGetStoresMethodDescriptor = storeServiceServiceDescriptor.Methods().ByName("GetStores")
	storeServiceGetStoreMethodDescriptor  = storeServiceServiceDescriptor.Methods().ByName("GetStore")
)

// StoreServiceClient is a client for the proto.StoreService service.
type StoreServiceClient interface {
	GetStores(context.Context, *connect.Request[store.GetStoresRequest]) (*connect.Response[store.GetStoresResponse], error)
	GetStore(context.Context, *connect.Request[store.GetStoreRequest]) (*connect.Response[store.GetStoreResponse], error)
}

// NewStoreServiceClient constructs a client for the proto.StoreService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storeServiceClient{
		getStores: connect.NewClient[store.GetStoresRequest, store.GetStoresResponse](
			httpClient,
			baseURL+StoreServiceGetStoresProcedure,
			connect.WithSchema(storeServiceGetStoresMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStore: connect.NewClient[store.GetStoreRequest, store.GetStoreResponse](
			httpClient,
			baseURL+StoreServiceGetStoreProcedure,
			connect.WithSchema(storeServiceGetStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storeServiceClient implements StoreServiceClient.
type storeServiceClient struct {
	getStores *connect.Client[store.GetStoresRequest, store.GetStoresResponse]
	getStore  *connect.Client[store.GetStoreRequest, store.GetStoreResponse]
}

// GetStores calls proto.StoreService.GetStores.
func (c *storeServiceClient) GetStores(ctx context.Context, req *connect.Request[store.GetStoresRequest]) (*connect.Response[store.GetStoresResponse], error) {
	return c.getStores.CallUnary(ctx, req)
}

// GetStore calls proto.StoreService.GetStore.
func (c *storeServiceClient) GetStore(ctx context.Context, req *connect.Request[store.GetStoreRequest]) (*connect.Response[store.GetStoreResponse], error) {
	return c.getStore.CallUnary(ctx, req)
}

// StoreServiceHandler is an implementation of the proto.StoreService service.
type StoreServiceHandler interface {
	GetStores(context.Context, *connect.Request[store.GetStoresRequest]) (*connect.Response[store.GetStoresResponse], error)
	GetStore(context.Context, *connect.Request[store.GetStoreRequest]) (*connect.Response[store.GetStoreResponse], error)
}

// NewStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoreServiceHandler(svc StoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storeServiceGetStoresHandler := connect.NewUnaryHandler(
		StoreServiceGetStoresProcedure,
		svc.GetStores,
		connect.WithSchema(storeServiceGetStoresMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceGetStoreHandler := connect.NewUnaryHandler(
		StoreServiceGetStoreProcedure,
		svc.GetStore,
		connect.WithSchema(storeServiceGetStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.StoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoreServiceGetStoresProcedure:
			storeServiceGetStoresHandler.ServeHTTP(w, r)
		case StoreServiceGetStoreProcedure:
			storeServiceGetStoreHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStoreServiceHandler struct{}

func (UnimplementedStoreServiceHandler) GetStores(context.Context, *connect.Request[store.GetStoresRequest]) (*connect.Response[store.GetStoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.StoreService.GetStores is not implemented"))
}

func (UnimplementedStoreServiceHandler) GetStore(context.Context, *connect.Request[store.GetStoreRequest]) (*connect.Response[store.GetStoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.StoreService.GetStore is not implemented"))
}
