// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/product/product.proto

package productconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	product "github.com/Mitra-Apps/be-store-service/domain/proto/product"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "ProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductServiceCreateProductsProcedure is the fully-qualified name of the ProductService's
	// CreateProducts RPC.
	ProductServiceCreateProductsProcedure = "/ProductService/CreateProducts"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	productServiceServiceDescriptor              = product.File_proto_product_product_proto.Services().ByName("ProductService")
	productServiceCreateProductsMethodDescriptor = productServiceServiceDescriptor.Methods().ByName("CreateProducts")
)

// ProductServiceClient is a client for the ProductService service.
type ProductServiceClient interface {
	// Create a new product
	CreateProducts(context.Context, *connect.Request[product.CreateProductsRequest]) (*connect.Response[product.CreateProductsResponse], error)
}

// NewProductServiceClient constructs a client for the ProductService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &productServiceClient{
		createProducts: connect.NewClient[product.CreateProductsRequest, product.CreateProductsResponse](
			httpClient,
			baseURL+ProductServiceCreateProductsProcedure,
			connect.WithSchema(productServiceCreateProductsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	createProducts *connect.Client[product.CreateProductsRequest, product.CreateProductsResponse]
}

// CreateProducts calls ProductService.CreateProducts.
func (c *productServiceClient) CreateProducts(ctx context.Context, req *connect.Request[product.CreateProductsRequest]) (*connect.Response[product.CreateProductsResponse], error) {
	return c.createProducts.CallUnary(ctx, req)
}

// ProductServiceHandler is an implementation of the ProductService service.
type ProductServiceHandler interface {
	// Create a new product
	CreateProducts(context.Context, *connect.Request[product.CreateProductsRequest]) (*connect.Response[product.CreateProductsResponse], error)
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productServiceCreateProductsHandler := connect.NewUnaryHandler(
		ProductServiceCreateProductsProcedure,
		svc.CreateProducts,
		connect.WithSchema(productServiceCreateProductsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ProductService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductServiceCreateProductsProcedure:
			productServiceCreateProductsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) CreateProducts(context.Context, *connect.Request[product.CreateProductsRequest]) (*connect.Response[product.CreateProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ProductService.CreateProducts is not implemented"))
}
