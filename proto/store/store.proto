syntax = "proto3";

option go_package = "github.com/Mitra-Apps/be-store-service/domain/proto/store;store";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";
import "google/protobuf/struct.proto";

// Common fields for all models
message BaseModel {
    string id = 1;
    google.protobuf.Timestamp created_at = 2;
    string created_by = 3;
    google.protobuf.Timestamp updated_at = 4;
    string updated_by = 5;
    google.protobuf.Timestamp deleted_at = 6;
    string deleted_by = 7;
}

message GenericResponse {
    int32 code = 1;
    string message = 2;
    google.protobuf.Struct data = 3;
}

// Store image message
message StoreImage {
    string id = 1;
    string store_id = 2;
    string image_type = 3 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string image_url = 4 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string image_base64 = 5;
}

// Store tag message
message StoreTag {
    string id = 1;
    string tag_name = 2 [(validate.rules).string = {min_len: 1, max_len: 255}];
}

// Store hour message
message StoreHour {
    string id = 1;
    string store_id = 2;
    int32 day_of_week = 3;
    string open = 4 [(validate.rules).string = {pattern: "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"}];
    string close = 5 [(validate.rules).string = {pattern: "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"}];
    bool is24hours = 6;
    bool isOpen = 7;
}

// Store message
message Store {
    string id = 1;
    string user_id = 2;
    string store_name = 3 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string store_description = 4 [(validate.rules).string = {min_len: 1, max_len: 512}];
    string address = 5 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string city = 6;
    string state = 7;
    string zip_code = 8;
    string phone = 9 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string email = 10;
    string website = 11 ;
    string status = 12;
    bool is_active = 13;
    double location_lat = 14;
    double location_lng = 15;
    repeated StoreTag tags = 16;
    repeated StoreHour hours = 17;
    repeated StoreImage images = 18;
}

message ProductCategory {
    int64 id = 1;
    string name = 2 [(validate.rules).string = {min_len: 1, max_len: 255}];
    bool is_active = 3;
}

message ProductType {
    int64 id = 1;
    string name = 2;
	bool is_active = 3;
	int64 product_category_id = 4;
}

message UnitOfMeasure {
	int64 id = 1;
    string name = 2;
    string symbol = 3;
	bool is_active = 4;
}

message Product {
	string id = 1;
	string store_id = 2;
	string name = 3;
	bool sale_status = 4;
    double price = 5;
    int64 stock = 6;
    string uom = 7;
	int64 product_type_id = 8;
    string product_type_name = 9;
    int64 product_category_id = 10;
    string product_category_name = 11;
    repeated ProductImage images = 12;
}

message ProductImage {
    string id = 1;
    string image_id = 2;
    string image_base64_str = 3;
    string image_url = 4;
}

message Pagination {
    int32 page = 1;
    int32 limit = 2;
    int32 total_record = 3;
    int32 records = 4;
    int32 total_page = 5;
}

// Store service definition
service StoreService {
    // Create a new store
    rpc CreateStore(CreateStoreRequest) returns (CreateStoreResponse) {
        option (google.api.http) = {
            post: "/api/v1/stores"
            body: "store"
        };
    }

    // Get a store by ID
    rpc GetStore(GetStoreRequest) returns (GetStoreResponse) {
        option (google.api.http) = {
            get: "/api/v1/stores/{store_id}"
        };
    }

    // Update an existing store
    rpc UpdateStore(UpdateStoreRequest) returns (UpdateStoreResponse) {
        option (google.api.http) = {
            put: "/api/v1/stores/{store_id}"
            body: "store"
        };
    }

    // Delete a store by ID
    rpc DeleteStore(DeleteStoreRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/stores/{ids}"
        };
    }

    // List all stores
    rpc ListStores(ListStoresRequest) returns (ListStoresResponse) {
        option (google.api.http) = {
            get: "/api/v1/stores"
        };
    }

    // Get Store By User ID
    rpc GetStoreByUserID(GetStoreByUserIDRequest) returns (GetStoreByUserIDResponse) {
        option (google.api.http) = {
            get: "/api/v1/stores/my-store"
        };
    }

    // Open close store
    rpc OpenCloseStore(OpenCloseStoreRequest) returns (OpenCloseStoreResponse) {
        option (google.api.http) = {
            put: "/api/v1/stores/active-toggle/{is_active}"
            body: "*"
        };
    }

    rpc GetProductById(GetProductByIdRequest) returns (GetProductByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/products/{product_id}"
        };
    }

    rpc GetProductList(GetProductListRequest) returns (GetProductListResponse) {
        option (google.api.http) = {
            get: "/api/v1/product-list/{store_id}/{is_include_deactivated}"
        };
    }

    rpc InsertProducts(InsertProductsRequest) returns (GenericResponse) {
        option (google.api.http) = {
            post: "/api/v1/products"
            body: "*"
        };
    }

    rpc UpdateProduct(UpdateProductRequest) returns (GenericResponse) {
        option (google.api.http) = {
            put: "/api/v1/product/{product_id}"
            body: "product"
        };
    }

    rpc DeleteProduct(DeleteProductRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/product/{product_id}"
        };
    }

    rpc GetUnitOfMeasures(GetUnitOfMeasuresRequest) returns (GetUnitOfMeasuresResponse) {
        option (google.api.http) = {
            get: "/api/v1/uom/{is_include_deactivated}"
        };
    }

    rpc UpsertUnitOfMeasure(UpsertUnitOfMeasureRequest) returns (UpsertUnitOfMeasureResponse) {
        option (google.api.http) = {
            post: "/api/v1/uom"
            body: "uom"
        };
    }

    rpc UpdateUnitOfMeasure(UpdateUnitOfMeasureRequest) returns (UpdateUnitOfMeasureResponse) {
        option (google.api.http) = {
            put: "/api/v1/uom/{uom_id}"
            body: "uom"
        };
    }

    rpc GetProductCategories(GetProductCategoriesRequest) returns (GetProductCategoriesResponse) {
        option (google.api.http) = {
            get: "/api/v1/product-category/{is_include_deactivated}"
        };
    }

    rpc UpsertProductCategory(UpsertProductCategoryRequest) returns (UpsertProductCategoryResponse) {
        option (google.api.http) = {
            post: "/api/v1/product-category"
            body: "productCategory"
        };
    }

    rpc UpdateProductCategory(UpsertProductCategoryRequest) returns (UpsertProductCategoryResponse) {
        option (google.api.http) = {
            put: "/api/v1/product-category/{id}"
            body: "productCategory"
        };
    }

    rpc GetProductTypes(GetProductTypesRequest) returns (GetProductTypesResponse) {
        option (google.api.http) = {
            get: "/api/v1/product-type/{product_category_id}/{is_include_deactivated}"
        };
    }

    rpc UpsertProductType(UpsertProductTypeRequest) returns (UpsertProductTypeResponse) {
        option (google.api.http) = {
            post: "/api/v1/product-type"
            body: "productType"
        };
    }

    rpc UpdateProductType(UpsertProductTypeRequest) returns (UpsertProductTypeResponse) {
        option (google.api.http) = {
            put: "/api/v1/product-type/{id}"
            body: "productType"
        };
    }
}

// Request message to create a store
message CreateStoreRequest {
    Store store = 1;
}

// Response message for creating a store
message CreateStoreResponse {
    int32 code = 1;
    string message = 2;
    Store data = 3;
}

// Request message to get a store by ID
message GetStoreRequest {
    string store_id = 1;
}

// Response message for getting a store
message GetStoreResponse {
    int32 code = 1;
    string message = 2;
    Store data = 3;
}

// Request message to update a store
message UpdateStoreRequest {
    string store_id = 1 [(validate.rules).string = {min_len: 1, max_len: 255}];
    Store store = 2;
}

// Response message for updating a store
message UpdateStoreResponse {
    int32 code = 1;
    string message = 2;
    Store data = 3;
}

// Request message to delete a store by ID
message DeleteStoreRequest {
    repeated string ids = 1;
}

// Request message to list all stores
message ListStoresRequest {
}

// Response message for listing stores
message ListStoresResponse {
    int32 code = 1;
    string message = 2;
    repeated Store data = 3;
    Store UserStore = 4;
}

message GetStoreByUserIDRequest {
}

message GetStoreByUserIDResponse {
    int32 code = 1;
    string message = 2;
    Store data = 3;
}

message OpenCloseStoreRequest {
    string store_id = 1;
    bool is_active = 2;
}

message OpenCloseStoreResponse {
    int32 code = 1;
    string message = 2;
}

message InsertProductsRequest {
    string store_id = 1;
    repeated Product productList = 2;
}

message UpdateProductRequest {
    string product_id = 1;
    Product product = 2;
}

message DeleteProductRequest {
    string product_id = 1;
}

message UpsertUnitOfMeasureRequest {
    UnitOfMeasure uom = 1;
}

message UpsertUnitOfMeasureResponse {
    int32 code = 1;
    string message = 2;
}

message UpdateUnitOfMeasureRequest {
    int64 uom_id = 1 [(validate.rules).int64.gt = 1];
    UnitOfMeasure uom = 2;
}

message UpdateUnitOfMeasureResponse {
    int32 code = 1;
    string message = 2;
}

message UpsertProductCategoryRequest {
    int64 id = 1;
    ProductCategory productCategory = 2;
}

message UpsertProductCategoryResponse {
    int32 code = 1;
    string message = 2;
}

message UpsertProductTypeRequest {
    int64 id = 1;
    ProductType productType = 2;
}

message UpsertProductTypeResponse {
    int32 code = 1;
    string message = 2;
}

message GetProductListRequest {
    string store_id = 1;
    int64 product_type_id = 2;
    bool is_include_deactivated = 3;
    int32 page = 4;
    int32 limit = 5;
}

message GetProductListResponse {
    int32 code = 1;
    string message = 2;
    repeated Product data = 3;
    Pagination pagination = 4;
}

message GetProductByIdRequest {
    string product_id = 1;
}

message GetProductByIdResponse {
    int32 code = 1;
    string message = 2;
    Product data = 3;
}

message GetUnitOfMeasuresRequest {
    bool is_include_deactivated = 1;
}

message GetUnitOfMeasuresResponse {
    int32 code = 1;
    string message = 2;
    repeated UnitOfMeasure data = 3;
}

message GetProductCategoriesRequest {
    bool is_include_deactivated = 1;
}

message GetProductCategoriesResponse {
    int32 code = 1;
    string message = 2;
    GetProductCategoriesResponseItem data = 3;
}

message GetProductCategoriesResponseItem {
    repeated ProductCategory product_category = 3;
    repeated string uom = 4;
}

message GetProductTypesRequest {
    int64 product_category_id = 1;
    bool is_include_deactivated = 2;
}

message GetProductTypesResponse {
    int32 code = 1;
    string message = 2;
    repeated ProductType data = 3;
}