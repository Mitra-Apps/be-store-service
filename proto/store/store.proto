syntax = "proto3";

option go_package = "github.com/Mitra-Apps/be-store-service/domain/proto/store;store";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

// Day of the week enum
enum DayOfWeekEnum {
    MONDAY = 0;
    TUESDAY = 1;
    WEDNESDAY = 2;
    THURSDAY = 3;
    FRIDAY = 4;
    SATURDAY = 5;
    SUNDAY = 6;
}

// Common fields for all models
message BaseModel {
    string id = 1;
    google.protobuf.Timestamp created_at = 2;
    string created_by = 3;
    google.protobuf.Timestamp updated_at = 4;
    string updated_by = 5;
    google.protobuf.Timestamp deleted_at = 6;
    string deleted_by = 7;
}

// Store image message
message StoreImage {
    string id = 1;
    string store_id = 2;
    string image_type = 3 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string image_url = 4 [(validate.rules).string = {min_len: 1, max_len: 255}];
}

// Store tag message
message StoreTag {
    string id = 1;
    string tag_name = 2 [(validate.rules).string = {min_len: 1, max_len: 255}];
}

// Store hour message
message StoreHour {
    string id = 1;
    string store_id = 2;
    DayOfWeekEnum day_of_week = 3;
    string open = 4 [(validate.rules).string = {pattern: "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"}];
    string close = 5 [(validate.rules).string = {pattern: "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"}];
}

// Store message
message Store {
    string id = 1;
    string user_id = 2 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string store_name = 3 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string store_description = 4 [(validate.rules).string = {min_len: 1, max_len: 512}];
    string address = 5 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string city = 6 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string state = 7 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string zip_code = 8 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string phone = 9 [(validate.rules).string = {min_len: 1, max_len: 255}];
    string email = 10 [(validate.rules).string.email = true];
    string website = 11;
    string status = 12;
    bool is_active = 13;
    double location_lat = 14;
    double location_lng = 15;
    repeated StoreTag tags = 16;
    repeated StoreHour hours = 17;
    repeated StoreImage images = 18;
}

// Store service definition
service StoreService {
    // Create a new store
    rpc CreateStore(CreateStoreRequest) returns (CreateStoreResponse) {
        option (google.api.http) = {
            post: "/api/v1/stores"
            body: "store"
        };
    }

    // Get a store by ID
    rpc GetStore(GetStoreRequest) returns (GetStoreResponse) {
        option (google.api.http) = {
            get: "/api/v1/stores/{store_id}"
        };
    }

    // Update an existing store
    rpc UpdateStore(UpdateStoreRequest) returns (UpdateStoreResponse) {
        option (google.api.http) = {
            put: "/v1/stores/{store_id}"
            body: "store"
        };
    }

    // Delete a store by ID
    rpc DeleteStore(DeleteStoreRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/stores/{store_id}"
        };
    }

    // List all stores
    rpc ListStores(ListStoresRequest) returns (ListStoresResponse) {
        option (google.api.http) = {
            get: "/api/v1/stores"
        };
    }

    // Open close store
    rpc OpenCloseStore(OpenCloseStoreRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/v1/stores/active-toggle/{is_active}"
        };
    }
}

// Request message to create a store
message CreateStoreRequest {
    Store store = 1;
}

// Response message for creating a store
message CreateStoreResponse {
    int32 code = 1;
    string message = 2;
    Store data = 3;
}

// Request message to get a store by ID
message GetStoreRequest {
    string store_id = 1;
}

// Response message for getting a store
message GetStoreResponse {
    int32 code = 1;
    string message = 2;
    Store data = 3;
}

// Request message to update a store
message UpdateStoreRequest {
    string store_id = 1;
    Store store = 2;
}

// Response message for updating a store
message UpdateStoreResponse {
    int32 code = 1;
    string message = 2;
    Store data = 3;
}

// Request message to delete a store by ID
message DeleteStoreRequest {
    string store_id = 1;
}

// Request message to list all stores
message ListStoresRequest {
    // You can add parameters for pagination, filtering, etc. if needed
}

message OpenCloseStoreRequest {
    string store_id = 1;
    bool is_active = 2;
}

// Response message for listing stores
message ListStoresResponse {
    int32 code = 1;
    string message = 2;
    repeated Store data = 3;
}